library(dplyr)
library(dplyr)
library(ggplot2)
library(MuMIn)
library(Hmisc)
install.packages('TMB', type = 'source')
install.packages("TMB")
install.packages("glmmTMB", type = "source")
library(glmmTMB)
install.packages('TMB', type = 'source')
install.packages("TMB", type = "source")
remove.packages(c("TMB", "glmmTMB"))
install.packages("TMB", type = "source")
library(TMB)
install.packages("TMB")
install.packages("glmmTMB", type = "source")
install.packages("/Users/apple/Downloads/Matrix_1.5.4.tar", repos = "NULL", type = "source")
devtools::setup_rtools()
install.packages("Matrix")
install.packages("Matrix")
cite()
citation()
install.packages(rphylopic)
install.packages('rphylopic')
?name_search
library(rphylopic)
?name_search
uuid <- get_uuid(name = "Vigna unguiculata", n = 1)
img <- get_phylopic(uuid = uuid)
recolor_phylopic(
img,
alpha = 1,
color = "red",
fill = "red",
remove_background = TRUE
)
img2 <- recolor_phylopic(
img,
alpha = 1,
color = "red",
fill = "red",
remove_background = TRUE
)
View(img2)
add_phylopic_base(name = "Canis lupus", x = 0.75, y = 1.25, ysize = 0.25, color = "orange")
add_phylopic_base(name = "Canis lupus", x = 0.75, y = 1.25, ysize = 0.25, color = "orange")
library(rphylopic)
add_phylopic_base(name = "Plantago lanceolata Ã— media", x = 0.75, y = 1.25, ysize = 0.25, color = "orange")
add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.25, ysize = 0.25, color = "orange")
plot(x = 1, y = 1, type = "n")
add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.25, ysize = 0.25, color = "orange")
add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.25, ysize = q, color = "orange")
add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.25, ysize = 1, color = "orange")
plot(x = 1, y = 1, type = "n")
add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.25, ysize = 2, color = "orange")
add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.4, ysize = 2, color = "orange")
plot(x = 1, y = 1, type = "n")
plot(add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.4, ysize = 2, color = "orange"))
plot.new()
add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.4, ysize = 2, color = "orange")
add_phylopic_base(name = "Plantago lanceolata", x = 0.75, y = 1.4, ysize = 2, color = "green")
# Plants
dP_dt <- P(min(g_C, g_N) - mu_P)
# Plants
dP_dt <- P*(min(g_C, g_N) - mu_P)
gaus <- function(x, a = 50, mu = 25, sigma = 1) {
a*exp(-(((x-mu)^2) / (2*sigma^2)))
}
asl <- function(d = 0.1, nyears = 50, npatches = 20000,
alpha = 0.1, temp.max = 33, temp.min = 3,
warming.rate = 0.3, thr = 1) {
init.time.steps <- 20
# a matrix where columns describe years and rows describe patches
H <- matrix(0, nrow=npatches, init.time.steps)
H[,1]<- 100
# Define a linear environmental gradient
temperature <- seq(from = temp.max, to = temp.min, length = npatches)
# Define lambda as a gaussian function of the environmental gradient
lambda <- gaus(temperature)
# rescaling parameter
c <- (exp(-d)+1)/(1-exp(-d))
# the distance between patches
distance <- abs(matrix(rep(1:npatches, npatches),
nrow=npatches,ncol=npatches,
byrow=TRUE)-seq(1:npatches))
# fraction of seeds that gets dispersed to different distances
fraction <- (exp(-d*distance))/c
# loop over the years
for (t in 2:init.time.steps)
{
H[,t] <- fraction %*% ((H[,t-1]*lambda)/(1+alpha*H[,t-1]))
}
# original range edge
old.rl <- max(which(H[,init.time.steps] >= thr))
# and associated temperature limit
temp.limit <- temperature[old.rl]
# New spatio-temporal matrix to record spread during climate change
N <- matrix(0, nrow = npatches, ncol = nyears)
N[,1] <- H[,init.time.steps]
# Create a spatio-temporal matrix to record climate niche through time
CN <- matrix(0, nrow = npatches, ncol = nyears)
CN[,1] <- gaus(seq(from = temp.max, to = temp.min, length = npatches))
# Create vectors to record variables of interest during simulation
range.limits <- numeric(nyears)
range.limits[1] <- old.rl
niche.limits <- numeric(nyears)
niche.limits[1] <- max(which(temperature >= temp.limit))
niche.cores <- numeric(nyears)
niche.cores[1] <- max(which(temperature >= 25))
# Loop over the years
for (t in 2:nyears)
{
# temperature increases linearly at every time step
temperature <- seq(from = temp.max, to = temp.min,
length = npatches)
temperature <- temperature + ((t-1)*warming.rate)
# Lambdas re-defined in each step
lambda <- gaus(temperature)
# Record distribution of climate niche
CN[,t] <- lambda
# Population distribution over the landscape at each time step
N[,t] <- fraction %*% ((N[,t-1]*lambda)/(1+alpha*N[,t-1]))
# Record range edge, niche limit, and niche core
range.limits[t] <- max(which(N[,t] >= thr))
niche.limits[t] <- max(which(temperature >= temp.limit))
niche.cores[t] <- max(which(temperature >= 25))
}
# Calculate range shifts at each time interval
range.shifts <- numeric(length(range.limits) - 1)
for (r in 1:length(range.shifts)) {
range.shifts[r] <- range.limits[r + 1] - range.limits[r]
}
# Calculate climate velocity
clim.vel <- (niche.limits[nyears] - niche.limits[nyears - 2]) / 2
output <- list(Range_Shifts = range.shifts,
Range_Limits = range.limits,
Density = N, Niche = CN,
ClimVel = clim.vel)
return(output)
}
# Define dispersal capacity for slow, medium, fast, and super fast species
d.slow <- 0.1
# Spread velocity for different dispersal rates
rs_slow <- asl(d = d.slow, temp.max = 33, temp.min = 3, warming.rate = 0.3)
rs_slow$Range_Shifts[is.infinite(rs_slow$Range_Shifts)] <- NA
b <-
# Plants
plants <- function(P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
dP_dt <- P*(min(g_C, g_N))
g_C <- ((alpha*A)/(alpha*P + k_PC)) - delta_P - X_C - c*Fix
g_N <- omega*(1-alpha)*((v_PN*S_N)/(S_N + k_PN)) + X_N + b*Fix
}
# simple model of logistic growth
dNt <- function(r, N) r * N * (1 - N)
# iterate growth through time
Nt <- function(r, N, t) {
for (i in 1:(t - 1)) {
# population at next time step is population at current time + pop growth
N[i + 1] <- N[i] + dNt(r, N[i])
}
N
}
# iterate growth through time
Nt <- function(r, N, t) {
for (i in 1:(t - 1)) {
# population at next time step is population at current time + pop growth
N[i + 1] <- N[i] + dNt(r, N[i])
}
N
}
t <- 100
r <- 0.1
# lets consider 4 different starting abundances (i.e., N(t=0) values)
Nt0 = c(0.1, 0.5, 1.5, 2)
par(mfrow=c(2,2))
?seq_along
for (i in seq_along(Nt0)) {
plot(1:t, Nt(r, Nt0[i], t), type = 'l', xlab = 'time', ylab = 'Population size',
main = paste('N(t=0) =', Nt0[i]), ylim =c(0, 2))
abline(h = 1, lty = 2, col='grey')
}
b <-
# Plants
plant_pop <- function(P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
dP_dt <- P*(min(g_C, g_N))
g_C <- ((alpha*A)/(alpha*P + k_PC)) - delta_P - X_C - c*Fix
g_N <- omega*(1-alpha)*((v_PN*S_N)/(S_N + k_PN)) + X_N + b*Fix
}
plant_sim <- function(t, P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
for(i in 1:(t-1)) {
P[i+1] <- P[i] + plant_pop(p[i], mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b)
}
}
#Params
mu_P <- .5
alpha <- .5
A <- .5
k_PC <- .5
delta_P <- .5
X_c <- .5
c <- .5
Fix <- .5
omega <- .5
k_PN <- .5
X_N <- .5
b <- .5
t <- 100
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b)
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b))
# Plants
plant_pop <- function(P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
dP_dt <- P*(min(g_C, g_N))
g_C <- ((alpha*A)/(alpha*P + k_PC)) - delta_P - X_C - c*Fix
g_N <- omega*(1-alpha)*((v_PN*S_N)/(S_N + k_PN)) + X_N + b*Fix
}
plant_sim <- function(t, P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
for(i in 1:(t-1)) {
P[i+1] <- P[i] + plant_pop(p[i], mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b)
}
}
t <- 100
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b))
P <- 10
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b))
plant_sim <- function(t, P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
for(i in 1:(t-1)) {
P[i+1] <- P[i] + plant_pop(P[i], mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b)
}
}
t <- 100
P <- 10
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b))
# Plants
plant_pop <- function(P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
g_C <- ((alpha*A)/(alpha*P + k_PC)) - delta_P - X_C - c*Fix
g_N <- omega*(1-alpha)*((v_PN*S_N)/(S_N + k_PN)) + X_N + b*Fix
dP_dt <- P*(min(g_C, g_N))
}
plant_sim <- function(t, P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
for(i in 1:(t-1)) {
P[i+1] <- P[i] + plant_pop(P[i], mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b)
}
}
t <- 100
P <- 10
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b))
X_C <- .5
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b))
v_PN <- 0.1
# Plants
plant_pop <- function(P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
g_C <- ((alpha*A)/(alpha*P + k_PC)) - delta_P - X_C - c*Fix
g_N <- omega*(1-alpha)*((v_PN*S_N)/(S_N + k_PN)) + X_N + b*Fix
dP_dt <- P*(min(g_C, g_N))
}
plant_sim <- function(t, P, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b) {
for(i in 1:(t-1)) {
P[i+1] <- P[i] + plant_pop(P[i], mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b)
}
}
t <- 100
P <- 10
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b))
S_N <- 10
plot(1:t, plant_sim(t, 100, mu_P, alpha, A, k_PC, delta_P, X_C, c, Fix, omega, v_PN, S_N, k_PN, X_N, b))
library(lubridate)
df <- '24:00:00'
as.numeric(hms(df))
df <- '24:00'
as.numeric(hms(df))
as.numeric(hm(df))
df <- '05:12'
as.numeric(hm(df))
x <- '05:12'
as.numeric(hm(x))
x <- as.numeric(hm(x))
setwd("~/Desktop/Research/HOI/Data")
census <- read.csv('weedingCensusData.csv')
packages <- c('dplyr', 'tidyr', 'ggplot2', 'ggpubr', 'ggeffects',
'Hmisc', 'lme4', 'MuMIn', 'visreg', "nlme")
lapply(packages, require, character.only = T)
setwd("~/Desktop/Research/FireBiodiversity/Data/ProcessedData")
responses_herbs_all <- read.csv("herbaceous_responses_all.csv")
responses_grass_all <- read.csv("grass_responses_all.csv")
responses_nongrass_all <- read.csv("nongrass_responses_all.csv")
responses_woody_all <- read.csv("woody_responses_all.csv")
supp_figure <- function(df_RR) {
plot(ggplot(df_RR, aes(x = FireFreq, y = logRR2, color = Vegetation)) +
geom_point(size = I(3)) +
ylab('log response ratio') +
xlab('fire frequency (fires per year)') +
theme_classic() +
theme(axis.ticks.length = unit(.3, 'cm'),
axis.title = element_text(size = 16), axis.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5),
legend.position = "none") +
scale_y_continuous(expand = c(0, 0), limits = c(-2,2), breaks = seq(-2,2,0.5)) +
scale_x_continuous(expand = c(0, 0), limits = c(0,1.01), breaks = seq(0, 1, by = .2)) +
geom_hline(yintercept=0, linetype='dashed') +
geom_errorbar(aes(ymin = logRR2 - logRR2_v, ymax = logRR2 + logRR2_v), width = 0.02) +
coord_cartesian(clip= "off") +
scale_color_manual(values=c("green4", "gold")))
}
supp_figure(responses_herbs_all)
supp_figure(responses_grass_all)
supp_figure(responses_nongrass_all)
supp_figure(responses_woody_all)
setwd("~/Desktop/Research/FireBiodiversity/Data")
library(dplyr)
library(tidyr)
# Calculate plot-level richness (S), Shannon diversity (H), evenness (J)
calcs <- function(cover) {
df <- cover %>% group_by(Site, Plot, FireFreq, FireStart, FireLast, FireSeason, SurveyYear) %>%
arrange(desc(Abundance), .by_group = TRUE) %>%
mutate(N = sum(Abundance), p = Abundance/N) %>%
summarise(S = n_distinct(GenusSpecies),                                      # species richness
H = -sum(p*log(p)),                                                # Shannon diversity
# D = 1 - (sum(Abundance*(Abundance - 1))/(sum(Abundance)*(sum(Abundance)-1))), # Simpson diversity
J = H/log(S),                                                      # evenness
# dom = sum(first(p), nth(p, 2), nth(p, 3)),                        # percent represented by 3 most dominant sp
# num70 = sum(cumsum(p) <= .7)                                      # number of species that comprise 70% of total
cover = sum(Abundance),
cover_adjusted = min(cover, 100)
)
# for plots surveyed multiple years, choose the most recent
df <- df %>% arrange(Site, Plot, FireFreq, desc(SurveyYear)) %>%
distinct(Site, Plot, FireFreq, .keep_all = TRUE)
return(df)
}
# Calculate response ratios for each fire frequency at each site
RR2 <- function(df) {
responses <- df %>% filter(FireFreq != 0) %>% group_by(Site, FireFreq) %>%
summarise(meanS = mean(S), meanH = mean(H), meanJ = mean(J), sdS = sd(S), sdH = sd(H), sdJ = sd(J), n = n(), cover = mean(cover), cover_adj = mean(cover_adjusted)) %>%
mutate(CV = sdS/meanS, CV_H = sdH/meanH, CV_J = sdJ/meanJ)
controls <- df %>% filter(FireFreq == 0) %>% group_by(Site) %>%
summarise(meanS = mean(S), meanH = mean(H), meanJ = mean(J), sdS = sd(S), sdH = sd(H), sdJ = sd(J), n = n(), cover = mean(cover), cover_adj = mean(cover_adjusted)) %>%
mutate(CV = sdS/meanS, CV_H = sdH/meanH, CV_J = sdJ/meanJ)
for (i in 1:nrow(responses)) {
for (j in 1:nrow(controls)) {
if (responses$Site[i] == controls$Site[j]) {
responses$RR_S[i] <- responses$meanS[i]/controls$meanS[j]
responses$logRR[i] <- log(responses$meanS[i]/controls$meanS[j])
responses$logRR2[i] <- log(responses$meanS[i]/controls$meanS[j]) + 0.5 * ( (((responses$CV[i])^2)/controls$n[j]) - (((controls$CV[j])^2)/responses$n[i]) )
responses$logRR2_v[i] <- ((responses$CV[i])^2)/responses$n[i] + ((controls$CV[j])^2)/controls$n[j] + ((responses$CV[i])^4)/(2*(responses$n[i])^2) + ((controls$CV[j])^4)/(2*(controls$n[j])^2)
responses$logRR_H[i] <- log(responses$meanH[i]/controls$meanH[j])
responses$logRR_H2[i] <- log(responses$meanH[i]/controls$meanH[j]) + 0.5 * ( (((responses$CV_H[i])^2)/controls$n[j]) - (((controls$CV_H[j])^2)/responses$n[i]) )
responses$logRR_H2_v[i] <- ((responses$CV_H[i])^2)/responses$n[i] + ((controls$CV_H[j])^2)/controls$n[j] + ((responses$CV_H[i])^4)/(2*(responses$n[i])^2) + ((controls$CV_H[j])^4)/(2*(controls$n[j])^2)
responses$logRR_J[i] <- log(responses$meanJ[i]/controls$meanJ[j])
responses$logRR_J2[i] <- log(responses$meanJ[i]/controls$meanJ[j]) + 0.5 * ( (((responses$CV_J[i])^2)/controls$n[j]) - (((controls$CV_J[j])^2)/responses$n[i]) )
responses$logRR_J2_v[i] <- ((responses$CV_J[i])^2)/responses$n[i] + ((controls$CV_J[j])^2)/controls$n[j] + ((responses$CV_J[i])^4)/(2*(responses$n[i])^2) + ((controls$CV_J[j])^4)/(2*(controls$n[j])^2)
}
}
}
return(list(responses, controls))
}
# Calculate response ratios for each fire frequency at each site, and scale based on CV and sample size
RR3 <- function(df) {
responses <- df %>% filter(FireFreq != 0) %>% group_by(Site, FireFreq) %>%
summarise(meanS = mean(S), sdS = sd(S), n = n()) %>%
mutate(CV = sdS/meanS)
controls <- df %>% filter(FireFreq == 0) %>% group_by(Site) %>%
summarise(meanS = mean(S), sdS = sd(S), n = n()) %>%
mutate(CV = sdS/meanS)
for (i in 1:nrow(responses)) {
for (j in 1:nrow(controls)) {
if (responses$Site[i] == controls$Site[j]) {
responses$RR_S[i] <- responses$meanS[i]/controls$meanS[j]
responses$logRR[i] <- log(responses$meanS[i]/controls$meanS[j])
responses$logRR2[i] <- log(responses$meanS[i]/controls$meanS[j]) + 0.5 * ( (((responses$CV[i])^2)/controls$n[j]) - (((controls$CV[j])^2)/responses$n[i]) )
responses$logRR2_v[i] <- ((responses$CV[i])^2)/responses$n[i] + ((controls$CV[j])^2)/controls$n[j] + ((responses$CV[i])^4)/(2*(responses$n[i])^2) + ((controls$CV[j])^4)/(2*(controls$n[j])^2)
}
}
}
return(list(responses, controls))
}
# Calculate response ratios for sites that do not have plot-level data
RR4 <- function(df) {
responses <- df %>% filter(FireFreq != 0)
controls <- df %>% filter(FireFreq == 0)
for (i in 1:nrow(responses)) {
for (j in 1:nrow(controls)) {
responses$logRR[i] <- log(responses$S[i]/controls$S[j])
responses$logRR2[i] <- log(responses$S[i]/controls$S[j]) + 0.5 * ( (((responses$CV[i])^2)/controls$n[i]) - (((controls$CV[i])^2)/responses$n[i]) )
responses$logRR2_v[i] <- ((responses$CV[i])^2)/responses$n[i] + ((controls$CV[j])^2)/controls$n[j] + ((responses$CV[i])^4)/(2*(responses$n[i])^2) + ((controls$CV[j])^4)/(2*(controls$n[j])^2)
}
}
return(list(responses, controls))
}
# Match site and climate data
sitedata <- read.csv("sitedata_full.csv")
match_sitedata <- function(df) {
df$Vegetation <- as.factor(sitedata$Biome[match(df$Site, sitedata$Site)])
df$MAP <- as.numeric(sitedata$MAP[match(df$Site, sitedata$Site)])
df$MAT <- as.numeric(sitedata$MAT[match(df$Site, sitedata$Site)])
df$Seasonality <- as.numeric(sitedata$Seasonality[match(df$Site, sitedata$Site)])
# df$WetQ <- as.numeric(sitedata$WetQ[match(df$Site, sitedata$Site)])
# df$DryQ <- as.numeric(sitedata$DryQ[match(df$Site, sitedata$Site)])
df$Aridity <- as.numeric(sitedata$aridity[match(df$Site, sitedata$Site)])
df$Duration <- as.numeric(sitedata$Duration[match(df$Site, sitedata$Site)])
df$Continent <- as.factor(sitedata$Continent[match(df$Site, sitedata$Site)])
return(df)
}
cover <- read.csv("percentCoverSurveys.csv")
# cover$SurveyYear[is.na(cover$SurveyYear)] <- "N/A"
# cover$FireStart[is.na(cover$FireStart)] <- "N/A"
# cover$FireLast[is.na(cover$FireLast)] <- "N/A"
# cover$FireSeason[is.na(cover$FireSeason)] <- "N/A"
cover <- cover %>% filter(Site != "JosephJones") %>% filter(!is.na(GenusSpecies)) # remove sites with no plot data and remove all unknown species
exclude <- c("ChimneySpring", "Limestone", "Yenisei", "Konza", "Wharton", "Sequoia", "KingsCanyon", "Escambia", "Lombard", "JosephJones")
cover <- filter(cover, !grepl(paste(exclude, collapse = "|"), Site))
df <- cover %>% calcs() %>% match_sitedata()
View(df)
# separating out herbaceous by subtracting species included in the woody basal area surveys from the percent cover surveys
# woody_sp <- unique(ba$GenusSpecies)
woody_sp2 <- unique(stems$GenusSpecies)
stems <- read.csv("woodyStemCounts.csv")
stems <- filter(stems, !grepl(paste(exclude, collapse = "|"), Site))
stems <- stems %>% mutate(Site = replace(Site, Site == "DryPeachester", "Peachester North"),
Site = replace(Site, Site == "WetPeachester", "Peachester South"),
Site = replace(Site, Site == "Kisatchia", "Kisatchie")) %>% match_sitedata()
df_stems <- stems %>% calcs() %>% match_sitedata()
# separating out herbaceous by subtracting species included in the woody basal area surveys from the percent cover surveys
# woody_sp <- unique(ba$GenusSpecies)
woody_sp2 <- unique(stems$GenusSpecies)
herbaceous <- cover[!(cover$GenusSpecies %in% woody_sp2),]
df_herbaceous <- herbaceous %>% calcs() %>% match_sitedata()
View(df_herbaceous)
herbaceous2 <- df_herbaceous %>% RR2()
View(herbaceous2)
responses_herbaceous2 <- as.data.frame(herbaceous2[1]) %>% mutate(logRR2 = coalesce(logRR2, logRR),
logRR_H2 = coalesce(logRR_H2, logRR_H),
logRR_J2 = coalesce(logRR_J2, logRR_J)) %>%
match_sitedata()
View(responses_herbaceous2)
